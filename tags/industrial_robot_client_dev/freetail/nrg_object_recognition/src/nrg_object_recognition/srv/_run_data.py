"""autogenerated by genpy from nrg_object_recognition/run_dataRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class run_dataRequest(genpy.Message):
  _md5sum = "e30510fddfcef6148f23b4b2cc1fc8d3"
  _type = "nrg_object_recognition/run_dataRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string object_name
uint16 method
uint16 num_samples
uint16 num_images
float32 noise_level

"""
  __slots__ = ['object_name','method','num_samples','num_images','noise_level']
  _slot_types = ['string','uint16','uint16','uint16','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       object_name,method,num_samples,num_images,noise_level

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(run_dataRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.object_name is None:
        self.object_name = ''
      if self.method is None:
        self.method = 0
      if self.num_samples is None:
        self.num_samples = 0
      if self.num_images is None:
        self.num_images = 0
      if self.noise_level is None:
        self.noise_level = 0.
    else:
      self.object_name = ''
      self.method = 0
      self.num_samples = 0
      self.num_images = 0
      self.noise_level = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.object_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3Hf.pack(_x.method, _x.num_samples, _x.num_images, _x.noise_level))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object_name = str[start:end].decode('utf-8')
      else:
        self.object_name = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.method, _x.num_samples, _x.num_images, _x.noise_level,) = _struct_3Hf.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.object_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3Hf.pack(_x.method, _x.num_samples, _x.num_images, _x.noise_level))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object_name = str[start:end].decode('utf-8')
      else:
        self.object_name = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.method, _x.num_samples, _x.num_images, _x.noise_level,) = _struct_3Hf.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3Hf = struct.Struct("<3Hf")
"""autogenerated by genpy from nrg_object_recognition/run_dataResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class run_dataResponse(genpy.Message):
  _md5sum = "954607f92aad7da4a7f7219a8f6d09c1"
  _type = "nrg_object_recognition/run_dataResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 rec_rate
float32 sigma_pose
float32[] prob_dist

float32 sigma_filtered
float32[] filt_dist

"""
  __slots__ = ['rec_rate','sigma_pose','prob_dist','sigma_filtered','filt_dist']
  _slot_types = ['float32','float32','float32[]','float32','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       rec_rate,sigma_pose,prob_dist,sigma_filtered,filt_dist

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(run_dataResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.rec_rate is None:
        self.rec_rate = 0.
      if self.sigma_pose is None:
        self.sigma_pose = 0.
      if self.prob_dist is None:
        self.prob_dist = []
      if self.sigma_filtered is None:
        self.sigma_filtered = 0.
      if self.filt_dist is None:
        self.filt_dist = []
    else:
      self.rec_rate = 0.
      self.sigma_pose = 0.
      self.prob_dist = []
      self.sigma_filtered = 0.
      self.filt_dist = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2f.pack(_x.rec_rate, _x.sigma_pose))
      length = len(self.prob_dist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.prob_dist))
      buff.write(_struct_f.pack(self.sigma_filtered))
      length = len(self.filt_dist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.filt_dist))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.rec_rate, _x.sigma_pose,) = _struct_2f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.prob_dist = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (self.sigma_filtered,) = _struct_f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.filt_dist = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2f.pack(_x.rec_rate, _x.sigma_pose))
      length = len(self.prob_dist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.prob_dist.tostring())
      buff.write(_struct_f.pack(self.sigma_filtered))
      length = len(self.filt_dist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.filt_dist.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.rec_rate, _x.sigma_pose,) = _struct_2f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.prob_dist = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (self.sigma_filtered,) = _struct_f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.filt_dist = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2f = struct.Struct("<2f")
_struct_f = struct.Struct("<f")
class run_data(object):
  _type          = 'nrg_object_recognition/run_data'
  _md5sum = '407342b2776680ade4c7095ba4f40467'
  _request_class  = run_dataRequest
  _response_class = run_dataResponse
