<launch>
  <arg name="monitor_robot_state" default="false"/>
  <arg name="allow_trajectory_execution" default="false"/>

  <param name="robot_description" textfile="$(find longhorn)/cfg/longhorn.xml" />
  <param name="robot_description_semantic" textfile="$(find longhorn_arm_navigation)/config/longhorn.srdf" />

  <group ns="robot_description_planning">
    <rosparam command="load" file="$(find longhorn_arm_navigation)/config/collision_matrix.yaml"/>
    <rosparam command="load" file="$(find longhorn_arm_navigation)/config/joint_limits.yaml"/>
  </group>

  <node unless="$(arg monitor_robot_state)" pkg="robot_state_publisher" type="state_publisher" name="rob_st_pub" />
  <node unless="$(arg monitor_robot_state)" pkg="moveit_visualization_ros" name="wall_clock_server" type="fake_time.py" />

  <node pkg="moveit_visualization_ros" type="moveit_visualizer" name="moveit_visualizer" output="screen">
    <rosparam command="load" file="$(find longhorn_arm_navigation)/config/ompl_planning.yaml"/>
    <rosparam command="load" file="$(find longhorn_arm_navigation)/config/kinematics.yaml"/>
    <rosparam if="$(arg allow_trajectory_execution)" file="$(find longhorn_arm_navigation)/config/longhorn_controllers.yaml"/> 
    <param name="monitor_robot_state" value="$(arg monitor_robot_state)"/>
    <param if="$(arg monitor_robot_state)" name="publish_root_transform" value="true"/>
    <param if="$(arg allow_trajectory_execution)" name="manage_controllers" value="false"/>
    <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
  </node>

</launch>
