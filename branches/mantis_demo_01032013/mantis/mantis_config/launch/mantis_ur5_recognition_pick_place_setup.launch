<?xml version="1.0" ?>
<launch>
	<!-- input arguments -->
	<arg name="use_chomp" default="false" />
	<arg name="launch_bringup" default="true"/>
	<arg name="sim_only" default="true"/>
	<arg name="use_clutter_grasp_planner" default="false"/>

	<arg name="sensor_usb_manual_setup" default="true"/>
	<arg name="sensor_usb_bus" default="002"/>
	<arg name="sensor_usb_device" default="000"/>

	<!-- fixed parameters -->
	<arg name="arm_namespace" value="ur5_arm"/>
	<arg name="robot_description" value="$(find xacro)/xacro.py '$(find mantis_config)/urdf/mantis_ur5_3fgripper_macro.xacro'"/>
	<arg name="sensor_name" value="$(arg arm_namespace)_kinect"/>

	<!-- launching bringup -->
	<include if="$(arg launch_bringup)" file="$(find mantis_config)/launch/mantis_ur5_3fgripper_bringup.launch">
		<arg name="sim_only" value="$(arg sim_only)"/>
	</include>

	<!-- camera sensor setup (must be placed outside the group namespace) -->
	<remap from="/$(arg sensor_name)/depth/points"
		to="/$(arg arm_namespace)/camera/depth_registered/points"/>
	<include  file="$(find mantis_perception)/launch/mantis_ur5_sensor.launch">
		<arg name="arm_prefix" value="$(arg arm_namespace)_"/>
		<arg name="camera_name" value="$(arg sensor_name)"/>
		<arg name="publish_tf" value="false" />
		<arg if="$(arg sensor_usb_manual_setup)" name="device_id" value="$(arg sensor_usb_bus)@$(arg sensor_usb_device)" />
	</include> 

	<!-- gripper description (needs to be outside the scope of the namespace)-->
	<rosparam  command="load" 
		file="$(find mantis_ur5_arm_navigation)/config/vacuum_gripper_description_parameters.yaml"/>

	<group ns="$(arg arm_namespace)">

		<!-- planning enviroment parameter setup-->
		<param name="robot_description" command="$(arg robot_description)" />
		<rosparam command="load" ns="robot_description_planning" 
			file="$(find mantis_ur5_arm_navigation)/config/mantis_ur5_planning_description.yaml" />

		<!-- planning environment server start -->
		<include  file="$(find planning_environment)/launch/environment_server.launch">
			<arg name="use_collision_map" value="false"/>
		</include>  

		<!-- path planner -->
		<!-- if chomp was selected -->
		<remap if="$(arg use_chomp)" 
			from="/$(arg arm_namespace)/chomp_planner_longrange/plan_path" 
			to="/$(arg arm_namespace)/path_planning/plan_kinematic_path"/>
		<include if="$(arg use_chomp)"  
			file="$(find mantis_ur5_arm_navigation)/launch/chomp_planning.launch"/>

		<!-- if ompl was selected -->
		<remap unless="$(arg use_chomp)" 
			from="/$(arg arm_namespace)/ompl_planning/plan_kinematic_path" 
			to="/$(arg arm_namespace)/path_planning/plan_kinematic_path"/>
		<include  unless="$(arg use_chomp)" 
			file="$(find mantis_ur5_arm_navigation)/launch/ompl_planning.launch"/>   


		<!-- trajectory filter -->
		<node  pkg="trajectory_filter_server" 
			name="trajectory_filter_server" type="trajectory_filter_server" output="screen">
			<rosparam command="load" file="$(find mantis_ur5_arm_navigation)/config/joint_limits.yaml"/>
			<rosparam unless="$(arg use_chomp)" command="load" 
				file="$(find mantis_ur5_arm_navigation)/config/ompl_filters.yaml"/>
			<rosparam if="$(arg use_chomp)" command="load" 
				file="$(find mantis_ur5_arm_navigation)/config/chomp_filters.yaml"/>
		</node>

		<!-- 3d initial phase recognition service -->
		<remap from="/mantis_object_recognition" to ="/$(arg arm_namespace)/mantis_object_recognition"/>
		<include file="$(find industrial_object_recognition_pcl17)/launch/rec_serv.launch"/>
		<!--<node  pkg="industrial_object_recognition_pcl17" name="recognition_service" 
			type="recognition_service" output="screen">
			<rosparam  command="load" 
			file="$(find mantis_perception)/config/perception_offsets.yaml"/>
		</node> -->

	</group>

	<!-- second phase recognition service (orientation correction) 
		Can not be namespaced because the node assumes the parameters have global scope-->
	<remap from="/pump_orientation_detection" to ="/$(arg arm_namespace)/rotation_correction"/>	
	<include file="$(find pump_vision)/launch/prosilica.launch" />

</launch>
