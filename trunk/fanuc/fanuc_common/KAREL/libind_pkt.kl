-- Software License Agreement (BSD License)
--
-- Copyright (c) 2012, TU Delft Robotics Institute
-- All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions
-- are met:
--
--  * Redistributions of source code must retain the above copyright
--    notice, this list of conditions and the following disclaimer.
--  * Redistributions in binary form must reproduce the above
--    copyright notice, this list of conditions and the following
--    disclaimer in the documentation and/or other materials provided
--    with the distribution.
--  * Neither the name of the TU Delft Robotics Institute nor the names 
--    of its contributors may be used to endorse or promote products 
--    derived from this software without specific prior written 
--    permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-- "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-- LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-- FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-- COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-- INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
-- BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-- LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-- CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-- LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
-- ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-- POSSIBILITY OF SUCH DAMAGE.


PROGRAM libind_pkt
--------------------------------------------------------------------------------
-- 
-- Library routines for creating / processing ROS Industrial packets
-- 
-- author: G.A. vd. Hoorn
-- 
--------------------------------------------------------------------------------
%NOLOCKGROUP
%NOPAUSE= COMMAND + TPENABLE + ERROR
%COMMENT = 'ROS Ind Packets'




--------------------------------------------------------------------------------
-- 
-- local types & constants
-- 
--------------------------------------------------------------------------------
%INCLUDE libind_pkt_t




--------------------------------------------------------------------------------
-- 
-- remote routine prototypes
-- 
--------------------------------------------------------------------------------
%INCLUDE karel_type_sz_h




--------------------------------------------------------------------------------
-- 
-- local routine prototypes
-- 
--------------------------------------------------------------------------------
%INCLUDE libind_pkt_h




--------------------------------------------------------------------------------
-- 
-- Empty body
-- 
--------------------------------------------------------------------------------
BEGIN
END libind_pkt




--------------------------------------------------------------------------------
-- 
-- Constructor: just resets the packet
-- 
--------------------------------------------------------------------------------
ROUTINE ipkt_ctor
BEGIN
    -- just reset packet
    ipkt_reset(this)
    -- cannot fail
    RETURN (0)
END ipkt_ctor




--------------------------------------------------------------------------------
-- 
-- Reset state of the packet
-- 
--------------------------------------------------------------------------------
ROUTINE ipkt_reset
VAR
    len__ : INTEGER
    d__   : INTEGER
BEGIN
    -- 
    len__ = ARRAY_LEN(this.joint_data_)
    d__   = 0

    -- zero array with joint angles
    FOR d__ = 1 TO len__ DO
        this.joint_data_[d__] = 0.0
    ENDFOR

    -- set up ROS industrial packet fields
    USING this DO
        length_     = (4 * sz_int) + (len__ * sz_real)
        msg_type_   =  0
        comm_type_  =  0
        reply_type_ =  0
        seq_nr_     =  0
    ENDUSING
END ipkt_reset




--------------------------------------------------------------------------------
-- 
-- Serialise the packet. Write bytestream to 'fd_sink'
-- 
--------------------------------------------------------------------------------
ROUTINE ipkt_srlise
VAR
    i__        : INTEGER
    stat__     : INTEGER
    array_sz__ : INTEGER
BEGIN
    --
    i__ = 0
    stat__ = 0
    array_sz__ = ARRAY_LEN(this.joint_data_)

    -- write out all fields ..
    WRITE fd_sink(this.length_)
    stat__ = IO_STATUS(fd_sink)
    IF stat__ <> 0 THEN RETURN (-stat__); ENDIF

    WRITE fd_sink(this.msg_type_)
    stat__ = IO_STATUS(fd_sink)
    IF stat__ <> 0 THEN RETURN (-stat__); ENDIF

    WRITE fd_sink(this.comm_type_)
    stat__ = IO_STATUS(fd_sink)
    IF stat__ <> 0 THEN RETURN (-stat__); ENDIF

    WRITE fd_sink(this.reply_type_)
    stat__ = IO_STATUS(fd_sink)
    IF stat__ <> 0 THEN RETURN (-stat__); ENDIF

    WRITE fd_sink(this.seq_nr_)
    stat__ = IO_STATUS(fd_sink)
    IF stat__ <> 0 THEN RETURN (-stat__); ENDIF

    -- now the array
    FOR i__ = 1 TO array_sz__ DO
        WRITE fd_sink(this.joint_data_[i__])

        -- check
        stat__ = IO_STATUS(fd_sink)
        IF stat__ <> 0 THEN RETURN (-stat__); ENDIF
    ENDFOR

    -- .. and end with a CR
    WRITE fd_sink(CR)

    -- done
    stat__ = IO_STATUS(fd_sink)
    RETURN (-stat__)
END ipkt_srlise




--------------------------------------------------------------------------------
-- 
-- Deserialise the industrial state packet. Read bytestream from 'fd_sink'
-- 
--------------------------------------------------------------------------------
ROUTINE ipkt_dsrlse
VAR
    i__        : INTEGER
    stat__     : INTEGER
    array_sz__ : INTEGER
BEGIN
    --
    i__ = 0
    stat__ = 0
    array_sz__ = ARRAY_LEN(this.joint_data_)

    -- write out all fields ..
    READ fd_sink(this.length_)
    stat__ = IO_STATUS(fd_sink)
    IF stat__ <> 0 THEN RETURN (-stat__); ENDIF

    READ fd_sink(this.msg_type_)
    stat__ = IO_STATUS(fd_sink)
    IF stat__ <> 0 THEN RETURN (-stat__); ENDIF

    READ fd_sink(this.comm_type_)
    stat__ = IO_STATUS(fd_sink)
    IF stat__ <> 0 THEN RETURN (-stat__); ENDIF

    READ fd_sink(this.reply_type_)
    stat__ = IO_STATUS(fd_sink)
    IF stat__ <> 0 THEN RETURN (-stat__); ENDIF

    READ fd_sink(this.seq_nr_)
    stat__ = IO_STATUS(fd_sink)
    IF stat__ <> 0 THEN RETURN (-stat__); ENDIF

    -- now the array
    FOR i__ = 1 TO array_sz__ DO
        READ fd_sink(this.joint_data_[i__])

        -- check
        stat__ = IO_STATUS(fd_sink)
        IF stat__ <> 0 THEN RETURN (-stat__); ENDIF
    ENDFOR

    -- done
    stat__ = IO_STATUS(fd_sink)
    RETURN (-stat__)
END ipkt_dsrlse




--------------------------------------------------------------------------------
-- 
-- Dump string rep of pkt (excluding joint_data array) to file descriptor 
-- 'fd_sink'.
-- 
--------------------------------------------------------------------------------
ROUTINE ipkt_dump
BEGIN
    WRITE fd_sink('PKT Instance:', CR, &
            ' length     :', this.length_, CR, &
            ' msg_type   :', this.msg_type_, CR, &
            ' comm_type  :', this.comm_type_, CR, &
            ' reply_type :', this.reply_type_, CR, &
            ' seq_nr     :', this.seq_nr_, CR)
END ipkt_dump
