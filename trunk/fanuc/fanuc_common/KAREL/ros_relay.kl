-- Software License Agreement (BSD License)
--
-- Copyright (c) 2012, TU Delft Robotics Institute
-- All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions
-- are met:
--
--  * Redistributions of source code must retain the above copyright
--    notice, this list of conditions and the following disclaimer.
--  * Redistributions in binary form must reproduce the above
--    copyright notice, this list of conditions and the following
--    disclaimer in the documentation and/or other materials provided
--    with the distribution.
--  * Neither the name of the TU Delft Robotics Institute nor the names 
--    of its contributors may be used to endorse or promote products 
--    derived from this software without specific prior written 
--    permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-- "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-- LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-- FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-- COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-- INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
-- BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-- LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-- CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-- LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
-- ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-- POSSIBILITY OF SUCH DAMAGE.


PROGRAM ros_relay
--------------------------------------------------------------------------------
-- 
-- ROS Industrial joint trajectory relay
-- 
-- Currently only supports joint position streaming.
-- 
-- Joint motion speed is limited (hard coded) to 20%.
-- 
-- NB: This is a work in progress, and as such should NOT be used on real 
--     hardware.
-- 
-- Assumptions:
--   - User Socket Messaging (USM) is supported by robot
--   - TAG 'S4' used for USM
--   - There is only 1 motion group
--   - The TP program 'move_to_pr' exists on the robot (see comment later on)
-- 
-- TODO
--   - make position register used for storing trajectory points configurable
--   - make joint motion speed configurable
-- 
-- 
-- author: G.A. vd. Hoorn
-- 
--------------------------------------------------------------------------------
%LOCKGROUP = 1
%COMMENT = 'ROS Ind Traj Relay'




--------------------------------------------------------------------------------
-- 
-- remote types & constants
-- 
--------------------------------------------------------------------------------
%INCLUDE libssock_t
%INCLUDE libind_pkt_t




--------------------------------------------------------------------------------
-- 
-- local types & constants
-- 
--------------------------------------------------------------------------------
var
	sock_        : ssock_t
	sock_fd_     : FILE       -- file descriptor has to be declared here
	pkt_in       : ind_pkt_t  -- incoming joint commands
	pkt_out      : ind_pkt_t  -- outgoing reply msgs
	new_j_pos    : JOINTPOS
	stat_        : INTEGER
	sleep_time   : INTEGER


const
	-- which server tag to use
	MOTION_TAG = 4
	-- speed to use with 'MOVE TO'
	MOVE_SPEED = 200
	-- Hz
	LOOP_HZ = 10




--------------------------------------------------------------------------------
-- 
-- remote routine prototypes
-- 
--------------------------------------------------------------------------------
%INCLUDE libssock_h
%INCLUDE libind_pkt_h
%INCLUDE libind_log_h
%INCLUDE libind_mth_h




--------------------------------------------------------------------------------
-- 
-- TP program for 'exec_move' to use if configured as such. Create as TP program
-- on robot. See the USE_TP constant declaration and routine 'exec_move'.
-- 
-- From KAREL Reference Manual, MARRC75KR07091E Rev C, sec B.8, page B-51
-- 
-- 1:J PR[1] 20% FINE ;
-- 
--------------------------------------------------------------------------------
ROUTINE move_to_pr FROM move_to_pr




--------------------------------------------------------------------------------
-- 
-- Update joint positions according to contents of ROS Industrial packet.
-- 
-- This routine can use either the 'MOVE TO' instruction, or a TP program. See 
-- the USE_TP constant declaration and routine 'move_to_pr'.
-- 
-- 
-- [in    ]  pkt     : packet containing new joint positions
-- [out   ]          :    0 IFF no error
--                       -1 IFF new position not reachable
--                     < -1 on any other error
-- 
--------------------------------------------------------------------------------
ROUTINE exec_move(pkt : ind_pkt_t) : INTEGER
VAR
	stat__ : INTEGER
BEGIN
	-- ROS sends radians, so convert
	arr_rad2deg(pkt.joint_data_)

	-- compensate J3
	pkt.joint_data_[3] = pkt.joint_data_[3] + pkt.joint_data_[2]

	-- convert reals to jointpos
	CNV_REL_JPOS(pkt.joint_data_, new_j_pos, stat__)
	IF stat__ <> 0 THEN RETURN (-stat__); ENDIF

	-- check to make sure point can be reached before performing motion
	IF J_IN_RANGE(new_j_pos) = FALSE THEN
		RETURN (-1)
	ENDIF

	-- move to point
	SET_JPOS_REG(1, new_j_pos, stat__)
	IF stat__ <> 0 THEN RETURN (-stat__); ENDIF

	-- exec
	move_to_pr

	-- done
	RETURN (0)
END exec_move




--------------------------------------------------------------------------------
-- 
-- Request next trajectory point from ROS node. Also sort of 'Send ACK'.
--
-- [in    ]  pkt     : the packet to send
-- [in    ]  sock_fd : file descriptor on the open socket
-- [out   ]          : 0 IFF no error
-- 
--------------------------------------------------------------------------------
ROUTINE req_next(pkt : ind_pkt_t; sock_fd : FILE) : INTEGER
VAR
	stat__ : INTEGER
BEGIN
	-- 
	stat__ = 0

	-- copy seq_nr from packet we ack
	-- this is NOT done by the sedwards protocol implementations (debugging aid)
	pkt_out.seq_nr_ = pkt.seq_nr_

	-- send ROS node request for next point
	stat__ = ipkt_srlise(pkt_out, sock_fd_)

	-- done
	RETURN (-ABS(stat__))
END req_next




--------------------------------------------------------------------------------
-- 
-- Send NACK to ROS node. Something erred
--
-- [in    ]  pkt     : the packet to send
-- [in    ]  sock_fd : file descriptor on the open socket
-- [out   ]          : 0 IFF no error
-- 
--------------------------------------------------------------------------------
ROUTINE send_err(pkt : ind_pkt_t; sock_fd : FILE) : INTEGER
VAR
	stat__ : INTEGER
BEGIN
	-- 
	stat__ = 0

	-- copy seq_nr from the packet we NACK
	-- this is NOT done by the sedwards protocol implementations (debugging aid)
	pkt_out.seq_nr_     = pkt.seq_nr_
	pkt_out.reply_type_ = INDU_FAILURE

	-- send ROS node request for next point
	stat__ = ipkt_srlise(pkt_out, sock_fd_)

	-- done
	RETURN (-ABS(stat__))
END send_err




--------------------------------------------------------------------------------
-- 
-- Main program
-- 
--------------------------------------------------------------------------------
BEGIN
	-- 
	stat_ = 0
	sleep_time = ROUND(1000.0 / LOOP_HZ)


	-- enable log output
	log_clear


	-- init server socket
	stat_ = ssock_ctor(sock_, INDU_MOTION, MOTION_TAG)
	IF stat_ <> 0 THEN
		IF stat_ = TAG_CONF_ERR THEN
			log_error_a('TAG config error. TAG nr:', MOTION_TAG)
		ELSE
			log_error_a('ssock_ctor err:', stat_)
		ENDIF
		-- nothing we can do, abort
		GOTO exit_on_err
	ENDIF


	-- init packet
	stat_ = ipkt_ctor(pkt_in)

	-- init reply packet
	stat_ = ipkt_ctor(pkt_out)
	USING pkt_out DO
		msg_type_   = INDU_JNT_MSG
		comm_type_  = INDU_RESPNSE
		reply_type_ = INDU_SUCCESS
		seq_nr_     = INDU_UNUSED
	ENDUSING


	-- make sure socket is closed
	-- don t care about result
	stat_ = ssock_dconnf(sock_)

	-- 
	WHILE TRUE DO

		-- inform user
		log_info('Waiting for ROS traj relay')

		-- set socket in 'binary mode' (unformatted)
		-- KAREL Reference Manual, MARRC75KR07091E Rev C, sec 7.3.1
		SET_FILE_ATR(sock_fd_, ATR_UF)

		-- wait for connection
		stat_ = ssock_accpt2(sock_, sock_fd_)
		IF stat_ <> 0 THEN
			log_error_a('sock_accept err:', stat_)
			-- can't continue
			GOTO exit_discon
		ENDIF

		-- inform user
		log_info('Connected')

		-- got client, start relay loop
		WHILE TRUE DO

			-- get new packet from the socket
			-- TODO: this assumes 1 packet per iteration (ok for now)
			stat_ = ipkt_checkfd(sock_fd_, pkt_in)
			IF stat_ < 0 THEN
				log_error_a('check_socket err:', stat_)

				-- can't continue
				GOTO exit_discon
			ENDIF

			-- see if there were any packets
			IF stat_ > 0 THEN

				-- check sequence number for special values
				SELECT pkt_in.seq_nr_ OF

					-- 'end of trajectory'
					CASE (INDU_SQ_END):
						log_info('INDU_SQ_END')
						-- TODO: what should we do here? If there are no more
						--       points to move to, arm will just stop


					-- 'indicates a stop'
					CASE (INDU_SQ_STOP):
						log_info('INDU_SQ_STOP')
						-- TODO: Test: not sure if this works as intended.
						CANCEL


					-- just 'a move'
					ELSE:
						-- 
						stat_ = exec_move(pkt_in)
						IF stat_ <> 0 THEN
							-- can't continue
							-- TODO: send ERR return to ROS
							log_error_a('exec_move err:', stat_)
							GOTO exit_discon
						ENDIF

						-- notify ROS node we want a new trajectory node
						stat_ = req_next(pkt_in, sock_fd_)
						IF stat_ <> 0 THEN
							-- can't continue
							log_error_a('req_next err:', stat_)
							GOTO exit_discon
						ENDIF
				ENDSELECT

			-- no packets waiting; and no motion in progress,
			-- sleep a little (1/T)
			ELSE
				DELAY sleep_time

			-- stat_ > 0
			ENDIF

		-- inner WHILE TRUE DO
		ENDWHILE

		-- exit with forced disconnect
exit_discon::
		stat_ = ssock_dconn2(sock_, sock_fd_)

	-- outer WHILE TRUE DO
	ENDWHILE


exit_on_err::
	-- nothing

END ros_relay
