/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 45 generated on 2012-01-16 13:14:47.804560
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef IKFAST_HEADER
#include IKFAST_HEADER
#endif

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IKReal)6.28318530717959)
#define IKPI  ((IKReal)3.14159265358979)
#define IKPI_2  ((IKReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

#ifdef IKFAST_REAL
typedef IKFAST_REAL IKReal;
#else
typedef double IKReal;
#endif

class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(std::size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IKReal)0.000001)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return 1.0f;
    }
    else if( f < 0 ) {
        return -1.0f;
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85,x86,x87,x88,x89,x90,x91,x92,x93,x94,x95;
x0=IKcos(j[0]);
x1=IKcos(j[3]);
x2=IKcos(j[1]);
x3=IKcos(j[2]);
x4=((x0)*(x2)*(x3));
x5=IKsin(j[0]);
x6=IKsin(j[2]);
x7=((x5)*(x6));
x8=IKsin(j[1]);
x9=IKsin(j[3]);
x10=IKcos(j[5]);
x11=IKcos(j[4]);
x12=((x4)+(((-1.00000000000000)*(x7))));
x13=((x1)*(x12));
x14=((x0)*(x8)*(x9));
x15=((x13)+(x14));
x16=((x11)*(x15));
x17=((x3)*(x5));
x18=((x0)*(x2)*(x6));
x19=((x17)+(x18));
x20=IKsin(j[4]);
x21=((x19)*(x20));
x22=((x16)+(x21));
x23=IKsin(j[5]);
x24=((x7)+(((-1.00000000000000)*(x4))));
x25=((x24)*(x9));
x26=((x0)*(x1)*(x8));
x27=((x25)+(x26));
x28=IKsin(j[6]);
x29=IKcos(j[6]);
x30=((x11)*(x19));
x31=((-1.00000000000000)*(x13));
x32=((-1.00000000000000)*(x14));
x33=((x32)+(x31));
x34=((x20)*(x33));
x35=((x30)+(x34));
x36=((x23)*(x27));
x37=((x10)*(x22));
x38=((x37)+(x36));
x39=((-1.00000000000000)*(x15));
x40=((x20)*(x39));
x41=((x30)+(x40));
x42=((-1.00000000000000)*(x37));
x43=((-1.00000000000000)*(x36));
x44=((x42)+(x43));
x45=((-1.00000000000000)*(x25));
x46=((-1.00000000000000)*(x26));
x47=((x46)+(x45));
x48=((-1.00000000000000)*(x27));
x49=((x2)*(x7));
x50=((x0)*(x3));
x51=((x49)+(((-1.00000000000000)*(x50))));
x52=((x11)*(x51));
x53=((x0)*(x6));
x54=((x17)*(x2));
x55=((x54)+(x53));
x56=((x1)*(x55));
x57=((x5)*(x8)*(x9));
x58=((x57)+(x56));
x59=((-1.00000000000000)*(x58));
x60=((x20)*(x59));
x61=((x52)+(x60));
x62=((x20)*(x51));
x63=((x11)*(x58));
x64=((x62)+(x63));
x65=((-1.00000000000000)*(x55));
x66=((x65)*(x9));
x67=((x1)*(x5)*(x8));
x68=((x66)+(x67));
x69=((x23)*(x68));
x70=((x10)*(x64));
x71=((x70)+(x69));
x72=((-1.00000000000000)*(x70));
x73=((-1.00000000000000)*(x69));
x74=((x73)+(x72));
x75=((-1.00000000000000)*(x68));
x76=((x1)*(x3)*(x8));
x77=((x2)*(x9));
x78=((((-1.00000000000000)*(x77)))+(x76));
x79=((x20)*(x78));
x80=((x11)*(x6)*(x8));
x81=((x79)+(((-1.00000000000000)*(x80))));
x82=((((-1.00000000000000)*(x76)))+(x77));
x83=((x11)*(x82));
x84=((x20)*(x6)*(x8));
x85=((x83)+(((-1.00000000000000)*(x84))));
x86=((x3)*(x8)*(x9));
x87=((x1)*(x2));
x88=((x86)+(x87));
x89=((x10)*(x85));
x90=((x23)*(x88));
x91=((x89)+(x90));
x92=((-1.00000000000000)*(x89));
x93=((-1.00000000000000)*(x90));
x94=((x93)+(x92));
x95=((-1.00000000000000)*(x88));
eerot[0]=((((-0.000369992039547180)*(x22)*(x23)))+(((-0.000369992039547180)*(x10)*(x48)))+(((0.460008907922493)*(x29)*(x35)))+(((0.460008907922493)*(x28)*(x44)))+(((0.887914223187041)*(x28)*(x35)))+(((0.887914223187041)*(x29)*(x38))));
eerot[1]=((((0.460008907916131)*(x29)*(x38)))+(((-9.01694019914401e-5)*(x10)*(x47)))+(((-0.887914295699358)*(x28)*(x44)))+(((-0.887914295699358)*(x29)*(x41)))+(((-9.01694019914401e-5)*(x22)*(x23)))+(((0.460008907916131)*(x28)*(x41))));
eerot[2]=((((-0.999999927487682)*(x10)*(x47)))+(((-0.999999927487682)*(x22)*(x23)))+(((-9.01369395252910e-5)*(x29)*(x35)))+(((-9.01369395252910e-5)*(x28)*(x44)))+(((-0.000369999949347010)*(x28)*(x35)))+(((-0.000369999949347010)*(x29)*(x38))));
eetrans[0]=((((x9)*(((((0.360000000000000)*(x7)))+(((-0.360000000000000)*(x4)))))))+(((-0.000191999938560029)*(x28)*(x44)))+(((-0.000191999938560029)*(x29)*(x35)))+(((-0.394999923200037)*(x22)*(x23)))+(((0.360000000000000)*(x26)))+(((-0.394999923200037)*(x10)*(x48)))+(((0.360000000000000)*(x0)*(x8))));
eerot[3]=((((-0.000369992039547180)*(x10)*(x75)))+(((0.887914223187041)*(x28)*(x61)))+(((0.460008907922493)*(x28)*(x74)))+(((0.887914223187041)*(x29)*(x71)))+(((0.460008907922493)*(x29)*(x61)))+(((-0.000369992039547180)*(x23)*(x64))));
eerot[4]=((((-9.01694019914401e-5)*(x23)*(x64)))+(((-0.887914295699358)*(x29)*(x61)))+(((-0.887914295699358)*(x28)*(x74)))+(((0.460008907916131)*(x28)*(x61)))+(((-9.01694019914401e-5)*(x10)*(((((-1.00000000000000)*(x67)))+(((-1.00000000000000)*(x66)))))))+(((0.460008907916131)*(x29)*(x71))));
eerot[5]=((((-9.01369395252910e-5)*(x28)*(x74)))+(((-0.999999927487682)*(x10)*(x75)))+(((-0.000369999949347010)*(x28)*(x61)))+(((-0.000369999949347010)*(x29)*(x71)))+(((-9.01369395252910e-5)*(x29)*(x61)))+(((-0.999999927487682)*(x23)*(x64))));
eetrans[1]=((((x9)*(((((-0.360000000000000)*(x54)))+(((-0.360000000000000)*(x53)))))))+(((0.360000000000000)*(x5)*(x8)))+(((-0.000191999938560029)*(x28)*(x74)))+(((0.360000000000000)*(x67)))+(((-0.394999923200037)*(x23)*(x64)))+(((-0.394999923200037)*(x10)*(x75)))+(((-0.000191999938560029)*(x29)*(x61))));
eerot[6]=((((-0.000369992039547180)*(x10)*(x95)))+(((-0.000369992039547180)*(x23)*(x85)))+(((0.887914223187041)*(x28)*(x81)))+(((0.460008907922493)*(x28)*(x94)))+(((0.460008907922493)*(x29)*(x81)))+(((0.887914223187041)*(x29)*(x91))));
eerot[7]=((((0.460008907916131)*(x29)*(x91)))+(((-9.01694019914401e-5)*(x10)*(x95)))+(((-0.887914295699358)*(x28)*(x94)))+(((0.460008907916131)*(x28)*(x81)))+(((-0.887914295699358)*(x29)*(x81)))+(((-9.01694019914401e-5)*(x23)*(x85))));
eerot[8]=((((-9.01369395252910e-5)*(x29)*(x81)))+(((-9.01369395252910e-5)*(x28)*(x94)))+(((-0.999999927487682)*(x23)*(x85)))+(((-0.999999927487682)*(x10)*(x95)))+(((-0.000369999949347010)*(x29)*(x91)))+(((-0.000369999949347010)*(x28)*(x81))));
eetrans[2]=((0.360000000000000)+(((-0.000191999938560029)*(x29)*(x81)))+(((0.360000000000000)*(x2)))+(((0.000191999938560029)*(x28)*(x91)))+(((-0.394999923200037)*(x23)*(x85)))+(((-0.394999923200037)*(x10)*(x95)))+(((0.360000000000000)*(x86)))+(((0.360000000000000)*(x87))));
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x67000001; }

class IKSolver {
public:
IKReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,j2,cj2,sj2,htj2,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((0.887914223187041)*(r00)))+(((0.460008907916131)*(r01)))+(((-0.000369999949347010)*(r02))));
new_r01=((((0.460008907922493)*(r00)))+(((-9.01369395252909e-5)*(r02)))+(((-0.887914295699358)*(r01))));
new_r02=((((-0.000369992039547180)*(r00)))+(((-0.999999927487682)*(r02)))+(((-9.01694019914401e-5)*(r01))));
new_px=((((-0.394999911863964)*(r02)))+(((-5.78251451475763e-5)*(r00)))+(px)+(((-0.000206096397082461)*(r01))));
new_r10=((((0.887914223187041)*(r10)))+(((0.460008907916131)*(r11)))+(((-0.000369999949347010)*(r12))));
new_r11=((((-0.887914295699358)*(r11)))+(((0.460008907922493)*(r10)))+(((-9.01369395252909e-5)*(r12))));
new_r12=((((-0.000369992039547180)*(r10)))+(((-9.01694019914401e-5)*(r11)))+(((-0.999999927487682)*(r12))));
new_py=((((-5.78251451475763e-5)*(r10)))+(((-0.394999911863964)*(r12)))+(((-0.000206096397082461)*(r11)))+(py));
new_r20=((((0.887914223187041)*(r20)))+(((0.460008907916131)*(r21)))+(((-0.000369999949347010)*(r22))));
new_r21=((((-9.01369395252909e-5)*(r22)))+(((-0.887914295699358)*(r21)))+(((0.460008907922493)*(r20))));
new_r22=((((-9.01694019914401e-5)*(r21)))+(((-0.999999927487682)*(r22)))+(((-0.000369992039547180)*(r20))));
new_pz=((-0.360000000000000)+(((-0.394999911863964)*(r22)))+(((-0.000206096397082461)*(r21)))+(pz)+(((-5.78251451475763e-5)*(r20))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
{
IKReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
cj3array[0]=((-1.00000000000000)+(((3.85802469135802)*(pp))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
{
    j3valid[1]=false;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
IKReal gconst0;
IKReal x96=(py)*(py);
IKReal x97=(sj2)*(sj2);
IKReal x98=(cj2)*(cj2);
gconst0=IKsign(((((25.0000000000000)*(px)*(((((-1.00000000000000)*(x96)*(x98)))+(((-1.00000000000000)*(x96)*(x97)))))))+(((25.0000000000000)*(py)*(((((px)*(py)*(x97)))+(((px)*(py)*(x98)))))))));
dummyeval[0]=0;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((1.00000000000000)+((cj3)*(cj3))+((((cj2)*(cj2))*((sj3)*(sj3))))+(((2.00000000000000)*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[3];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j3)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)*(pp));
evalcond[2]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
IKReal x99=((-1.00000000000000)*(py));
IKReal x100=IKatan2(x99, px);
j0array[0]=((-1.00000000000000)*(x100));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x100))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
{
    j0valid[1]=false;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IKReal dummyeval[1];
IKReal gconst7;
gconst7=IKsign(((((-2.00000000000000)*(cj0)*(px)*(py)*(sj0)*(sj2)))+(((-1.00000000000000)*(sj2)*((cj0)*(cj0))*((px)*(px))))+(((-1.00000000000000)*(sj2)*((pz)*(pz))))+(((-1.00000000000000)*(sj2)*((py)*(py))*((sj0)*(sj0))))));
dummyeval[0]=((((-2.00000000000000)*(cj0)*(px)*(py)*(sj0)*(sj2)))+(((-1.00000000000000)*(sj2)*((cj0)*(cj0))*((px)*(px))))+(((-1.00000000000000)*(sj2)*((pz)*(pz))))+(((-1.00000000000000)*(sj2)*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[6];
IKReal x101=((cj0)*(py));
IKReal x102=((px)*(sj0));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j2)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)*(pp));
evalcond[2]=((((-1.00000000000000)*(x101)))+(x102));
evalcond[3]=pz;
evalcond[4]=((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px))));
evalcond[5]=((((-1.00000000000000)*(x102)))+(x101));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj0)*(cj0))*((px)*(px))))+(((-1.00000000000000)*((pz)*(pz))))+(((-2.00000000000000)*(cj0)*(px)*(py)*(sj0)))+(((-1.00000000000000)*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x103=(pz)*(pz);
IKReal x104=((18.0000000000000)*(x103));
IKReal x105=(cj0)*(cj0);
IKReal x106=(px)*(px);
IKReal x107=((18.0000000000000)*(x105)*(x106));
IKReal x108=(py)*(py);
IKReal x109=(sj0)*(sj0);
IKReal x110=((18.0000000000000)*(x108)*(x109));
IKReal x111=((36.0000000000000)*(cj0)*(px)*(py)*(sj0));
IKReal x112=((x111)+(x110)+(x104)+(x107));
j1array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x112) != 0)?((IKReal)1/(x112)):(IKReal)1.0e30))*(((((-25.0000000000000)*(pp)*(py)*(sj0)))+(((-25.0000000000000)*(cj0)*(pp)*(px)))))), ((25.0000000000000)*(pp)*(pz)*(((IKabs(x112) != 0)?((IKReal)1/(x112)):(IKReal)1.0e30))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x160=((px)*(sj0));
IKReal x161=((cj0)*(py));
IKReal x162=((((-1.00000000000000)*(x161)))+(x160));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j2)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)*(pp));
evalcond[2]=x162;
evalcond[3]=pz;
evalcond[4]=((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px))));
evalcond[5]=x162;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst8;
gconst8=IKsign(((((18.0000000000000)*((pz)*(pz))))+(((18.0000000000000)*((cj0)*(cj0))*((px)*(px))))+(((18.0000000000000)*((py)*(py))*((sj0)*(sj0))))+(((36.0000000000000)*(cj0)*(px)*(py)*(sj0)))));
dummyeval[0]=(((((py)*(py))*((sj0)*(sj0))))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px))))+(((2.00000000000000)*(cj0)*(px)*(py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
j1array[0]=IKatan2(((gconst8)*(((((25.0000000000000)*(pp)*(py)*(sj0)))+(((25.0000000000000)*(cj0)*(pp)*(px)))))), ((25.0000000000000)*(gconst8)*(pp)*(pz)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
j1array[0]=IKatan2(((gconst7)*(((((-1.00000000000000)*(cj2)*(px)*(pz)*(sj0)))+(((cj0)*(cj2)*(py)*(pz)))))), ((gconst7)*(((((-1.00000000000000)*(cj0)*(cj2)*(sj0)*((py)*(py))))+(((cj2)*(px)*(py)*((sj0)*(sj0))))+(((cj0)*(cj2)*(sj0)*((px)*(px))))+(((-1.00000000000000)*(cj2)*(px)*(py)*((cj0)*(cj0))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IKReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
IKReal x163=((0.360000000000000)*(cj3));
IKReal x164=((0.360000000000000)+(x163));
IKReal x165=(x164)*(x164);
IKReal x166=(cj2)*(cj2);
IKReal x167=(sj3)*(sj3);
IKReal x168=((0.129600000000000)*(x166)*(x167));
IKReal x169=((x168)+(x165));
if( (x169) < (IKReal)-0.00001 )
    continue;
IKReal x170=IKsqrt(x169);
IKReal x171=IKabs(x170);
IKReal x172=((IKabs(x171) != 0)?((IKReal)1/(x171)):(IKReal)1.0e30);
IKReal x173=((pz)*(x172));
if( (x173) < -1-IKFAST_SINCOS_THRESH || (x173) > 1+IKFAST_SINCOS_THRESH )
    continue;
IKReal x174=IKasin(x173);
IKReal x175=((-0.360000000000000)+(((-1.00000000000000)*(x163))));
IKReal x176=((-0.360000000000000)*(cj2)*(sj3));
IKReal x177=IKatan2(x175, x176);
j1array[0]=((((-1.00000000000000)*(x177)))+(((-1.00000000000000)*(x174))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.00000000000000)*(x177)))+(x174));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
{
    j1valid[1]=false;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IKReal dummyeval[1];
IKReal gconst1;
gconst1=IKsign(((((-450.000000000000)*(sj1)*((py)*(py))))+(((-450.000000000000)*(sj1)*((px)*(px))))));
dummyeval[0]=((((-1.00000000000000)*(sj1)*((py)*(py))))+(((-1.00000000000000)*(sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
IKReal x178=((0.360000000000000)*(cj3));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j1)), 6.28318530717959)));
evalcond[1]=((0.259200000000000)+(((0.259200000000000)*(cj3)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((-0.360000000000000)+(((-1.00000000000000)*(x178)))+(pz));
evalcond[3]=((((0.720000000000000)*(pz)))+(((-1.00000000000000)*(pp))));
evalcond[4]=((0.360000000000000)+(x178)+(((-1.00000000000000)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst2;
gconst2=IKsign(((((-25.0000000000000)*((py)*(py))))+(((-25.0000000000000)*((px)*(px))))));
dummyeval[0]=((((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
j0array[0]=IKatan2(((gconst2)*(((((-9.00000000000000)*(px)*(sj2)*(sj3)))+(((9.00000000000000)*(cj2)*(py)*(sj3)))))), ((gconst2)*(((((9.00000000000000)*(py)*(sj2)*(sj3)))+(((9.00000000000000)*(cj2)*(px)*(sj3)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x179=((0.360000000000000)*(cj3));
IKReal x180=((0.360000000000000)+(x179)+(pz));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j1)), 6.28318530717959)));
evalcond[1]=((0.259200000000000)+(((0.259200000000000)*(cj3)))+(((-1.00000000000000)*(pp))));
evalcond[2]=x180;
evalcond[3]=((((-0.720000000000000)*(pz)))+(((-1.00000000000000)*(pp))));
evalcond[4]=x180;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst3;
gconst3=IKsign(((((25.0000000000000)*((px)*(px))))+(((25.0000000000000)*((py)*(py))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
j0array[0]=IKatan2(((gconst3)*(((((9.00000000000000)*(px)*(sj2)*(sj3)))+(((9.00000000000000)*(cj2)*(py)*(sj3)))))), ((gconst3)*(((((9.00000000000000)*(cj2)*(px)*(sj3)))+(((-9.00000000000000)*(py)*(sj2)*(sj3)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
j0array[0]=IKatan2(((gconst1)*(((((-625.000000000000)*(pp)*(py)))+(((450.000000000000)*(cj1)*(py)*(pz)))+(((-162.000000000000)*(px)*(sj1)*(sj2)*(sj3)))))), ((gconst1)*(((((450.000000000000)*(cj1)*(px)*(pz)))+(((-625.000000000000)*(pp)*(px)))+(((162.000000000000)*(py)*(sj1)*(sj2)*(sj3)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
IKReal x181=((-1.00000000000000)*(py));
IKReal x182=IKatan2(x181, px);
IKReal x183=(px)*(px);
IKReal x184=(py)*(py);
IKReal x185=((x184)+(x183));
if( (x185) < (IKReal)-0.00001 )
    continue;
IKReal x186=IKsqrt(x185);
IKReal x187=IKabs(x186);
IKReal x188=((IKabs(x187) != 0)?((IKReal)1/(x187)):(IKReal)1.0e30);
IKReal x189=((0.360000000000000)*(sj2)*(sj3)*(x188));
if( (x189) < -1-IKFAST_SINCOS_THRESH || (x189) > 1+IKFAST_SINCOS_THRESH )
    continue;
IKReal x190=IKasin(x189);
j0array[0]=((((-1.00000000000000)*(x182)))+(x190));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x182)))+(((-1.00000000000000)*(x190))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
{
    j0valid[1]=false;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IKReal dummyeval[1];
IKReal gconst4;
gconst4=IKsign(((((-162.000000000000)*(py)*(sj0)))+(((-162.000000000000)*(cj0)*(px)))+(((-162.000000000000)*(cj3)*(py)*(sj0)))+(((162.000000000000)*(cj2)*(pz)*(sj3)))+(((-162.000000000000)*(cj0)*(cj3)*(px)))));
dummyeval[0]=((((-1.00000000000000)*(cj0)*(cj3)*(px)))+(((-1.00000000000000)*(cj3)*(py)*(sj0)))+(((-1.00000000000000)*(py)*(sj0)))+(((cj2)*(pz)*(sj3)))+(((-1.00000000000000)*(cj0)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j3)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)*(pp));
evalcond[2]=((((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0))));
evalcond[3]=pz;
evalcond[4]=((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst5;
gconst5=IKsign(((((-2.00000000000000)*(cj0)*(px)*(py)*(sj0)*(sj2)))+(((-1.00000000000000)*(sj2)*((cj0)*(cj0))*((px)*(px))))+(((-1.00000000000000)*(sj2)*((pz)*(pz))))+(((-1.00000000000000)*(sj2)*((py)*(py))*((sj0)*(sj0))))));
dummyeval[0]=((((-2.00000000000000)*(cj0)*(px)*(py)*(sj0)*(sj2)))+(((-1.00000000000000)*(sj2)*((cj0)*(cj0))*((px)*(px))))+(((-1.00000000000000)*(sj2)*((pz)*(pz))))+(((-1.00000000000000)*(sj2)*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[6];
IKReal x191=((cj0)*(py));
IKReal x192=((px)*(sj0));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j2)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)*(pp));
evalcond[2]=((((-1.00000000000000)*(x191)))+(x192));
evalcond[3]=pz;
evalcond[4]=((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px))));
evalcond[5]=((((-1.00000000000000)*(x192)))+(x191));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj0)*(cj0))*((px)*(px))))+(((-1.00000000000000)*((pz)*(pz))))+(((-2.00000000000000)*(cj0)*(px)*(py)*(sj0)))+(((-1.00000000000000)*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x193=(pz)*(pz);
IKReal x194=((18.0000000000000)*(x193));
IKReal x195=(cj0)*(cj0);
IKReal x196=(px)*(px);
IKReal x197=((18.0000000000000)*(x195)*(x196));
IKReal x198=(py)*(py);
IKReal x199=(sj0)*(sj0);
IKReal x200=((18.0000000000000)*(x198)*(x199));
IKReal x201=((36.0000000000000)*(cj0)*(px)*(py)*(sj0));
IKReal x202=((x197)+(x194)+(x201)+(x200));
j1array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x202) != 0)?((IKReal)1/(x202)):(IKReal)1.0e30))*(((((-25.0000000000000)*(pp)*(py)*(sj0)))+(((-25.0000000000000)*(cj0)*(pp)*(px)))))), ((25.0000000000000)*(pp)*(pz)*(((IKabs(x202) != 0)?((IKReal)1/(x202)):(IKReal)1.0e30))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x203=((px)*(sj0));
IKReal x204=((cj0)*(py));
IKReal x205=((((-1.00000000000000)*(x204)))+(x203));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j2)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)*(pp));
evalcond[2]=x205;
evalcond[3]=pz;
evalcond[4]=((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px))));
evalcond[5]=x205;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst6;
gconst6=IKsign(((((18.0000000000000)*((pz)*(pz))))+(((18.0000000000000)*((cj0)*(cj0))*((px)*(px))))+(((18.0000000000000)*((py)*(py))*((sj0)*(sj0))))+(((36.0000000000000)*(cj0)*(px)*(py)*(sj0)))));
dummyeval[0]=(((((py)*(py))*((sj0)*(sj0))))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px))))+(((2.00000000000000)*(cj0)*(px)*(py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
j1array[0]=IKatan2(((gconst6)*(((((25.0000000000000)*(pp)*(py)*(sj0)))+(((25.0000000000000)*(cj0)*(pp)*(px)))))), ((25.0000000000000)*(gconst6)*(pp)*(pz)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
j1array[0]=IKatan2(((gconst5)*(((((-1.00000000000000)*(cj2)*(px)*(pz)*(sj0)))+(((cj0)*(cj2)*(py)*(pz)))))), ((gconst5)*(((((-1.00000000000000)*(cj0)*(cj2)*(sj0)*((py)*(py))))+(((cj2)*(px)*(py)*((sj0)*(sj0))))+(((cj0)*(cj2)*(sj0)*((px)*(px))))+(((-1.00000000000000)*(cj2)*(px)*(py)*((cj0)*(cj0))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
j1array[0]=IKatan2(((gconst4)*(((((-225.000000000000)*(pp)))+(((-225.000000000000)*(cj3)*(pp)))+(((450.000000000000)*((pz)*(pz))))))), ((gconst4)*(((((-450.000000000000)*(py)*(pz)*(sj0)))+(((225.000000000000)*(cj2)*(pp)*(sj3)))+(((-450.000000000000)*(cj0)*(px)*(pz)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x206=(py)*(py);
IKReal x207=(sj2)*(sj2);
IKReal x208=(cj2)*(cj2);
j0array[0]=IKatan2(((gconst0)*(((((9.00000000000000)*(sj2)*(sj3)*(x206)))+(((9.00000000000000)*(sj2)*(sj3)*(((((-1.00000000000000)*(x206)*(x208)))+(((-1.00000000000000)*(x206)*(x207)))))))))), ((gconst0)*(((((9.00000000000000)*(px)*(py)*(sj2)*(sj3)))+(((-9.00000000000000)*(sj2)*(sj3)*(((((px)*(py)*(x207)))+(((px)*(py)*(x208)))))))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IKReal dummyeval[1];
IKReal gconst4;
gconst4=IKsign(((((-162.000000000000)*(py)*(sj0)))+(((-162.000000000000)*(cj0)*(px)))+(((-162.000000000000)*(cj3)*(py)*(sj0)))+(((162.000000000000)*(cj2)*(pz)*(sj3)))+(((-162.000000000000)*(cj0)*(cj3)*(px)))));
dummyeval[0]=((((-1.00000000000000)*(cj0)*(cj3)*(px)))+(((-1.00000000000000)*(cj3)*(py)*(sj0)))+(((-1.00000000000000)*(py)*(sj0)))+(((cj2)*(pz)*(sj3)))+(((-1.00000000000000)*(cj0)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j3)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)*(pp));
evalcond[2]=((((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0))));
evalcond[3]=pz;
evalcond[4]=((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst5;
gconst5=IKsign(((((-2.00000000000000)*(cj0)*(px)*(py)*(sj0)*(sj2)))+(((-1.00000000000000)*(sj2)*((cj0)*(cj0))*((px)*(px))))+(((-1.00000000000000)*(sj2)*((pz)*(pz))))+(((-1.00000000000000)*(sj2)*((py)*(py))*((sj0)*(sj0))))));
dummyeval[0]=((((-2.00000000000000)*(cj0)*(px)*(py)*(sj0)*(sj2)))+(((-1.00000000000000)*(sj2)*((cj0)*(cj0))*((px)*(px))))+(((-1.00000000000000)*(sj2)*((pz)*(pz))))+(((-1.00000000000000)*(sj2)*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[6];
IKReal x209=((cj0)*(py));
IKReal x210=((px)*(sj0));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j2)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)*(pp));
evalcond[2]=((((-1.00000000000000)*(x209)))+(x210));
evalcond[3]=pz;
evalcond[4]=((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px))));
evalcond[5]=((x209)+(((-1.00000000000000)*(x210))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj0)*(cj0))*((px)*(px))))+(((-1.00000000000000)*((pz)*(pz))))+(((-2.00000000000000)*(cj0)*(px)*(py)*(sj0)))+(((-1.00000000000000)*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x211=(pz)*(pz);
IKReal x212=((18.0000000000000)*(x211));
IKReal x213=(cj0)*(cj0);
IKReal x214=(px)*(px);
IKReal x215=((18.0000000000000)*(x213)*(x214));
IKReal x216=(py)*(py);
IKReal x217=(sj0)*(sj0);
IKReal x218=((18.0000000000000)*(x216)*(x217));
IKReal x219=((36.0000000000000)*(cj0)*(px)*(py)*(sj0));
IKReal x220=((x212)+(x215)+(x218)+(x219));
j1array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x220) != 0)?((IKReal)1/(x220)):(IKReal)1.0e30))*(((((-25.0000000000000)*(pp)*(py)*(sj0)))+(((-25.0000000000000)*(cj0)*(pp)*(px)))))), ((25.0000000000000)*(pp)*(pz)*(((IKabs(x220) != 0)?((IKReal)1/(x220)):(IKReal)1.0e30))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x221=((px)*(sj0));
IKReal x222=((cj0)*(py));
IKReal x223=((x221)+(((-1.00000000000000)*(x222))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j2)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)*(pp));
evalcond[2]=x223;
evalcond[3]=pz;
evalcond[4]=((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px))));
evalcond[5]=x223;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst6;
gconst6=IKsign(((((18.0000000000000)*((pz)*(pz))))+(((18.0000000000000)*((cj0)*(cj0))*((px)*(px))))+(((18.0000000000000)*((py)*(py))*((sj0)*(sj0))))+(((36.0000000000000)*(cj0)*(px)*(py)*(sj0)))));
dummyeval[0]=(((((py)*(py))*((sj0)*(sj0))))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px))))+(((2.00000000000000)*(cj0)*(px)*(py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
j1array[0]=IKatan2(((gconst6)*(((((25.0000000000000)*(pp)*(py)*(sj0)))+(((25.0000000000000)*(cj0)*(pp)*(px)))))), ((25.0000000000000)*(gconst6)*(pp)*(pz)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
j1array[0]=IKatan2(((gconst5)*(((((-1.00000000000000)*(cj2)*(px)*(pz)*(sj0)))+(((cj0)*(cj2)*(py)*(pz)))))), ((gconst5)*(((((-1.00000000000000)*(cj0)*(cj2)*(sj0)*((py)*(py))))+(((cj2)*(px)*(py)*((sj0)*(sj0))))+(((cj0)*(cj2)*(sj0)*((px)*(px))))+(((-1.00000000000000)*(cj2)*(px)*(py)*((cj0)*(cj0))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
j1array[0]=IKatan2(((gconst4)*(((((-225.000000000000)*(pp)))+(((-225.000000000000)*(cj3)*(pp)))+(((450.000000000000)*((pz)*(pz))))))), ((gconst4)*(((((-450.000000000000)*(py)*(pz)*(sj0)))+(((225.000000000000)*(cj2)*(pp)*(sj3)))+(((-450.000000000000)*(cj0)*(px)*(pz)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}
}
}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IKReal x113=((sj1)*(sj3));
IKReal x114=((cj1)*(cj2)*(cj3));
IKReal x115=((x113)+(x114));
IKReal x116=((cj0)*(cj3)*(sj2));
IKReal x117=((sj0)*(x115));
IKReal x118=((x117)+(x116));
IKReal x119=((cj0)*(x115));
IKReal x120=((cj3)*(sj0)*(sj2));
IKReal x121=((((-1.00000000000000)*(x120)))+(x119));
IKReal x122=((cj1)*(sj3));
IKReal x123=((cj2)*(cj3)*(sj1));
IKReal x124=((((-1.00000000000000)*(x123)))+(x122));
IKReal x125=((cj2)*(sj0));
IKReal x126=((cj0)*(cj1)*(sj2));
IKReal x127=((x126)+(x125));
IKReal x128=((cj1)*(sj0)*(sj2));
IKReal x129=((cj0)*(cj2));
IKReal x130=((((-1.00000000000000)*(x129)))+(x128));
IKReal x131=((cj2)*(x122));
IKReal x132=((cj3)*(sj1));
IKReal x133=((x131)+(((-1.00000000000000)*(x132))));
IKReal x134=((cj1)*(cj3));
IKReal x135=((cj2)*(x113));
IKReal x136=((x135)+(x134));
IKReal x137=((-1.00000000000000)*(x136));
IKReal x138=((sj0)*(x133));
IKReal x139=((cj0)*(sj2)*(sj3));
IKReal x140=((x139)+(x138));
IKReal x141=((cj0)*(x133));
IKReal x142=((-1.00000000000000)*(sj0)*(sj2)*(sj3));
IKReal x143=((x141)+(x142));
new_r00=((((r10)*(x118)))+(((r00)*(x121)))+(((r20)*(x124))));
new_r01=((((r21)*(x124)))+(((r01)*(x121)))+(((r11)*(x118))));
new_r02=((((r02)*(x121)))+(((r22)*(x124)))+(((r12)*(x118))));
new_r10=((((-1.00000000000000)*(r20)*(sj1)*(sj2)))+(((r00)*(x127)))+(((r10)*(x130))));
new_r11=((((-1.00000000000000)*(r21)*(sj1)*(sj2)))+(((r01)*(x127)))+(((r11)*(x130))));
new_r12=((((r02)*(x127)))+(((r12)*(x130)))+(((-1.00000000000000)*(r22)*(sj1)*(sj2))));
new_r20=((((r00)*(x143)))+(((r20)*(x137)))+(((r10)*(x140))));
new_r21=((((r01)*(x143)))+(((r21)*(x137)))+(((r11)*(x140))));
new_r22=((((r22)*(x137)))+(((r02)*(x143)))+(((r12)*(x140))));
{
IKReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
cj5array[0]=new_r22;
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
if( j5valid[0] && j5valid[1] && IKabs(cj5array[0]-cj5array[1]) < 0.0001 && IKabs(sj5array[0]-sj5array[1]) < 0.0001 )
{
    j5valid[1]=false;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
IKReal gconst10;
gconst10=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst9;
gconst9=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[7];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j5)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((-1.00000000000000)*(new_r20));
evalcond[5]=((-1.00000000000000)*(new_r21));
evalcond[6]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
IKReal x144=IKatan2(new_r02, new_r12);
j4array[0]=((-1.00000000000000)*(x144));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.00000000000000)*(x144))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
{
    j4valid[1]=false;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
IKReal x145=((1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j5)), 6.28318530717959)));
evalcond[1]=x145;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x145;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
IKReal x146=IKatan2(new_r02, new_r12);
j4array[0]=((-1.00000000000000)*(x146));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.00000000000000)*(x146))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
{
    j4valid[1]=false;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst9)*(new_r12)*(sj5)), ((gconst9)*(new_r02)*(sj5)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
IKReal gconst11;
gconst11=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[11];
IKReal x147=((cj4)*(new_r12));
IKReal x148=((new_r02)*(sj4));
IKReal x149=((((-1.00000000000000)*(x148)))+(x147));
IKReal x150=((new_r12)*(sj4));
IKReal x151=((cj4)*(new_r02));
IKReal x152=((x151)+(x150));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j5)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x149;
evalcond[5]=x149;
evalcond[6]=x152;
evalcond[7]=x152;
evalcond[8]=((-1.00000000000000)*(new_r20));
evalcond[9]=((-1.00000000000000)*(new_r21));
evalcond[10]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x153=((cj4)*(new_r12));
IKReal x154=((new_r02)*(sj4));
IKReal x155=((((-1.00000000000000)*(x154)))+(x153));
IKReal x156=((new_r12)*(sj4));
IKReal x157=((cj4)*(new_r02));
IKReal x158=((x157)+(x156));
IKReal x159=((1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j5)), 6.28318530717959)));
evalcond[1]=x159;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x155;
evalcond[5]=x155;
evalcond[6]=x158;
evalcond[7]=((-1.00000000000000)*(x158));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x159;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((gconst11)*(new_r21)), ((-1.00000000000000)*(gconst11)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((gconst10)*(new_r21)), ((-1.00000000000000)*(gconst10)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IKReal dummyeval[1];
IKReal gconst12;
gconst12=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst12)*(new_r12)*(sj5)), ((gconst12)*(new_r02)*(sj5)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "10e65f95802ba5c14142b76835410f69"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(std::size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
